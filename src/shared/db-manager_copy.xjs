const MongoClient = require('mongodb').MongoClient;
const promise = require('promise');

// import {MongoClient} from 'mongodb';

class DBManager {
  constructor() {
    this.connect();
  }

  async connect() {
    if (process.env.MONGODB_URI) {
      const connect = MongoClient.connect(process.env.MONGODB_URI, {
        useUnifiedTopology: true,
        useNewUrlParser: true,
        promiseLibrary: promise,
      });

      try {
        const connection = await connect;
        this.db = connection.db('appinno');
      } catch (error) {
        console.error(`Failed to connect to MongoDB. ${error.code} : ${error.message}`);
        console.error(error.stack);
      }

      /*
			connect.then((db) => {
				console.info(`Connected to MongoDB with URI: ${process.env.MONGODB_URI}`)
				this.db = db.db('appinno');
			}).catch(error => {
				console.error(`Failed to connect to MongoDB. ${error.code} : ${error.message}`);
				console.error(error.stack);
			});*/
    } else {
      console.error(`Cannot connect to MongoDB with the url: ${process.env.MONGODB_URI}`);
    }
  }

  insert(collectionName, data) {
    if (this.db) {
      return this.db.collection(collectionName).insertOne(data);
    } else {
      return promise.reject('Cannot connect to the database');
    }
  }

  // Update the document with matched query
  update(collectionName, query, data) {
    if (this.db) {
      return this.db.collection(collectionName).updateOne(query, { $set: data });
    } else {
      return promise.reject('Cannot connect to the database');
    }
  }

  // Replace the entire document with matched query
  replace(collectionName, query, data) {
    if (this.db) {
      return this.db.collection(collectionName).replaceOne(query, data);
    } else {
      return promise.reject('Cannot connect to the database');
    }
  }

  find(collectionName, ...params) {
    const [query, options = {}] = params;
    if (this.db) {
      return this.db.collection(collectionName).find(query, options).toArray();
    } else {
      return promise.reject('Cannot connect to the database');
    }
  }

  collection(collectionName) {
    return new Promise((resolve, reject) => {
      MongoClient.connect(url, function (error, db) {
        if (error) {
          console.error(`Error in getting collection ${collectionName} : ${error}`);
          reject(error);
        }

        const dbo = db.db('appinno');
        resolve(dbo.collection(collectionName));
      });
    });
  }
}

module.exports = new DBManager();

/*
// Backup code
	insertOld(collectionName, data) {
		return new Promise((resolve, reject) => this.collection(collectionName).then((collection) => {
			collection.insertOne(data, function(error, res) {
				if (error) {
					reject(error);
				}
				resolve("1 document inserted");
				//db.close();
			});
		}).catch(error => {reject(error)}));
	}

	updateOld(collectionName, query, data) {
		return new Promise((resolve, reject) => this.collection(collectionName).then((collection) => {
			collection.updateOne(query, {$set: data}, function(error, res) {
				if (error) {
					reject(error);
				}
				resolve("1 document updated");
				//db.close();
			});
		}).catch(error => {reject(error)}));
	}

	findOld(collectionName, query) {
		return new Promise((resolve, reject) => this.collection(collectionName).then((collection) => {
			collection.findOne(query, function(error, result) {
				if (error) {
					reject(error);
				}

				//db.close();
				resolve(result);
			});
		}).catch(error => {reject(error)}));`
	}
	*/
